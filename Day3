{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNE1BemNBQ81IXQv9aTyP7W",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shiva02634/298/blob/main/Day3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "loMb2C83LSCO",
        "outputId": "546359b8-eff9-4241-dec7-40b466c41954"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Type: Integer, Value: 10, Python Type: <class 'int'>\n",
            "Type: Float, Value: 3.14, Python Type: <class 'float'>\n",
            "Type: String, Value: Hello, World!, Python Type: <class 'str'>\n",
            "Type: Boolean, Value: True, Python Type: <class 'bool'>\n",
            "Type: Complex, Value: (2+3j), Python Type: <class 'complex'>\n",
            "Type: List, Value: [1, 2, 3, 4, 5], Python Type: <class 'list'>\n",
            "Type: Tuple, Value: (6, 7, 8, 9, 10), Python Type: <class 'tuple'>\n",
            "Type: Set, Value: {11, 12, 13, 14}, Python Type: <class 'set'>\n",
            "Type: Dictionary, Value: {'a': 1, 'b': 2}, Python Type: <class 'dict'>\n",
            "Type: NoneType, Value: None, Python Type: <class 'NoneType'>\n"
          ]
        }
      ],
      "source": [
        "# Declare variables of different data types\n",
        "integer_var = 10               # Integer\n",
        "float_var = 3.14               # Float\n",
        "string_var = \"Hello, World!\"   # String\n",
        "boolean_var = True             # Boolean\n",
        "complex_var = 2 + 3j           # Complex Number\n",
        "list_var = [1, 2, 3, 4, 5]     # List\n",
        "tuple_var = (6, 7, 8, 9, 10)   # Tuple\n",
        "set_var = {11, 12, 13, 14}     # Set\n",
        "dict_var = {'a': 1, 'b': 2}    # Dictionary\n",
        "none_var = None                # NoneType\n",
        "\n",
        "# Print each variable and its type\n",
        "variables = [\n",
        "    (\"Integer\", integer_var),\n",
        "    (\"Float\", float_var),\n",
        "    (\"String\", string_var),\n",
        "    (\"Boolean\", boolean_var),\n",
        "    (\"Complex\", complex_var),\n",
        "    (\"List\", list_var),\n",
        "    (\"Tuple\", tuple_var),\n",
        "    (\"Set\", set_var),\n",
        "    (\"Dictionary\", dict_var),\n",
        "    (\"NoneType\", none_var)\n",
        "]\n",
        "\n",
        "for var_type, var_value in variables:\n",
        "    print(f\"Type: {var_type}, Value: {var_value}, Python Type: {type(var_value)}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6A2bQfjMLVpE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# List\n",
        "my_list = [10, 20, 30, 40, 50]\n",
        "print(\"List:\", my_list)\n",
        "\n",
        "# Access elements in the list by index\n",
        "print(\"First element of the list:\", my_list[0])   # Index 0\n",
        "print(\"Third element of the list:\", my_list[2])   # Index 2\n",
        "print(\"Last element of the list:\", my_list[-1])   # Negative indexing\n",
        "\n",
        "# Tuple\n",
        "my_tuple = (\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\")\n",
        "print(\"\\nTuple:\", my_tuple)\n",
        "\n",
        "# Access elements in the tuple by index\n",
        "print(\"Second element of the tuple:\", my_tuple[1])  # Index 1\n",
        "print(\"Fourth element of the tuple:\", my_tuple[3])  # Index 3\n",
        "print(\"Last element of the tuple:\", my_tuple[-1])   # Negative indexing\n",
        "\n",
        "# Dictionary\n",
        "my_dict = {\n",
        "    \"name\": \"Alice\",\n",
        "    \"age\": 25,\n",
        "    \"city\": \"New York\",\n",
        "    \"job\": \"Engineer\",\n",
        "    \"hobby\": \"Photography\"\n",
        "}\n",
        "print(\"\\nDictionary:\", my_dict)\n",
        "\n",
        "# Access elements in the dictionary by key\n",
        "print(\"Name:\", my_dict[\"name\"])        # Key: \"name\"\n",
        "print(\"City:\", my_dict[\"city\"])        # Key: \"city\"\n",
        "print(\"Hobby:\", my_dict[\"hobby\"])      # Key: \"hobby\"\n",
        "\n",
        "# Example: Accessing multiple elements\n",
        "print(\"\\nAccess multiple elements from the list:\", my_list[1:4])  # Slice [20, 30, 40]\n",
        "print(\"Access multiple elements from the tuple:\", my_tuple[:3])   # Slice ('apple', 'banana', 'cherry')\n",
        "\n",
        "# Access multiple keys from the dictionary (convert to a list of keys/values)\n",
        "print(\"Keys in the dictionary:\", list(my_dict.keys())[:3])        # First 3 keys\n",
        "print(\"Values in the dictionary:\", list(my_dict.values())[:3])    # First 3 values\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y-errRLWPAAk",
        "outputId": "c97be1e4-6380-45f4-993d-6897a5671a68"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "List: [10, 20, 30, 40, 50]\n",
            "First element of the list: 10\n",
            "Third element of the list: 30\n",
            "Last element of the list: 50\n",
            "\n",
            "Tuple: ('apple', 'banana', 'cherry', 'date', 'elderberry')\n",
            "Second element of the tuple: banana\n",
            "Fourth element of the tuple: date\n",
            "Last element of the tuple: elderberry\n",
            "\n",
            "Dictionary: {'name': 'Alice', 'age': 25, 'city': 'New York', 'job': 'Engineer', 'hobby': 'Photography'}\n",
            "Name: Alice\n",
            "City: New York\n",
            "Hobby: Photography\n",
            "\n",
            "Access multiple elements from the list: [20, 30, 40]\n",
            "Access multiple elements from the tuple: ('apple', 'banana', 'cherry')\n",
            "Keys in the dictionary: ['name', 'age', 'city']\n",
            "Values in the dictionary: ['Alice', 25, 'New York']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4i88SnAQPdy_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Input marks for three subjects\n",
        "subject1 = float(input(\"Enter marks for Subject 1: \"))\n",
        "subject2 = float(input(\"Enter marks for Subject 2: \"))\n",
        "subject3 = float(input(\"Enter marks for Subject 3: \"))\n",
        "\n",
        "# Calculate the average\n",
        "average = (subject1 + subject2 + subject3) / 3\n",
        "\n",
        "# Determine the grade\n",
        "if average >= 90:\n",
        "    print(\"Grade: A\")\n",
        "elif 80 <= average < 90:\n",
        "    print(\"Grade: B\")\n",
        "elif 70 <= average < 80:\n",
        "    print(\"Grade: C\")\n",
        "else:\n",
        "    print(\"Grade: Fail\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "reeNm1zWSK9Z",
        "outputId": "745fa8b9-b84b-4771-820c-8caefe855c4e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter marks for Subject 1: 90\n",
            "Enter marks for Subject 2: 80\n",
            "Enter marks for Subject 3: 70\n",
            "Grade: B\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "sLl7aM8ZSMxj"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}